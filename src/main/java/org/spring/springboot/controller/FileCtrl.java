package org.spring.springboot.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import net.sf.json.JSON;
import net.sf.json.JSONObject;
import sun.misc.BASE64Decoder;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@RestController
public class FileCtrl {
   //文件上传相关代码
   @ResponseBody
   @RequestMapping(value = "uploadBase64",method= RequestMethod.GET)
   //public JSON uploadBase64() {
       public JSON uploadBase64(@RequestParam String imgStr) {
	   imgStr = imgStr.replace(" ", "+");
	   //String imgStr = "";
	   //System.out.println(imgStr);
	   String fileName = new Date().getTime()+".jpeg";
	   String imgFilePath = "C:\\java\\apache-tomcat-7.0.79-windows-x64\\apache-tomcat-7.0.79\\webapps\\upFiles\\";
	   imgFilePath = imgFilePath+fileName;
	   JSONObject JsonObject = new JSONObject();
       BASE64Decoder decoder = new BASE64Decoder();
       try {
           // Base64解码
           byte[] bytes = decoder.decodeBuffer(imgStr);
           for (int i = 0; i < bytes.length; ++i) {
               if (bytes[i] < 0) {// 调整异常数据
                   bytes[i] += 256;
               }
           }
           // 生成jpeg图片
           OutputStream out = new FileOutputStream(imgFilePath);
           out.write(bytes);
           out.flush();
           out.close();
           JsonObject.put("fileName", fileName);
           System.out.println("fileName"+fileName);
           JsonObject.put("result", 2);
           return JsonObject;
       } catch (Exception e) {
    	   System.out.println(e.getMessage());
         	JsonObject.put("result", 1);
        	JsonObject.put("fileName", fileName);
           	return JsonObject;
       }
		  
   }

}